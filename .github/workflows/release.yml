name: Release Binaries

on:
  workflow_dispatch: {}
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Show Go env
        run: |
          go version
          go env

      - name: Install RtMidi deps (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends pkg-config build-essential librtmidi-dev

      - name: Install RtMidi deps (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config rtmidi

      - name: Setup MSYS2 + RtMidi (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            zip
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-go
            mingw-w64-x86_64-rtmidi

      - name: Build binary (Unix)
        if: runner.os != 'Windows'
        env:
          CGO_ENABLED: 1
        run: |
          set -euxo pipefail
          BIN_NAME="smf-sequencer"
          GOOS=$(go env GOOS)
          GOARCH=$(go env GOARCH)
          mkdir -p dist
          OUT="dist/${BIN_NAME}_${GOOS}_${GOARCH}"
          go build -v -o "${OUT}/${BIN_NAME}"
          # package
          tar -C "${OUT}" -czf "${OUT}.tar.gz" "${BIN_NAME}"
          # keep plain folder for debug artifacts too
          ls -la "${OUT}" || true
          echo "ASSET_PATH=${OUT}.tar.gz" >> "$GITHUB_ENV"
          echo "ASSET_NAME=${BIN_NAME}_${GOOS}_${GOARCH}.tar.gz" >> "$GITHUB_ENV"

      - name: Build binary (Windows, MinGW)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        env:
          CGO_ENABLED: 1
          CC: x86_64-w64-mingw32-gcc
          CXX: x86_64-w64-mingw32-g++
          # Use static flags from pkg-config to prefer static libs
          PKG_CONFIG: pkgconf --static
        run: |
          set -euxo pipefail
          BIN_NAME=smf-sequencer
          GOOS=$(go env GOOS)
          GOARCH=$(go env GOARCH)
          mkdir -p dist
          OUT="dist/${BIN_NAME}_${GOOS}_${GOARCH}"
          mkdir -p "$OUT"
          # Statically link libstdc++ and libgcc to avoid DLL dependencies
          go build -v -ldflags '-linkmode external -extldflags "-static -static-libgcc -static-libstdc++"' -o "$OUT/${BIN_NAME}.exe"
          (cd "$OUT" && zip -9 "../${BIN_NAME}_${GOOS}_${GOARCH}.zip" "${BIN_NAME}.exe")
          echo "ASSET_PATH=dist/${BIN_NAME}_${GOOS}_${GOARCH}.zip" >> "$GITHUB_ENV"
          echo "ASSET_NAME=${BIN_NAME}_${GOOS}_${GOARCH}.zip" >> "$GITHUB_ENV"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_PATH }}
          if-no-files-found: error

  release:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List downloaded artifacts
        run: |
          ls -R dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: |
            dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
